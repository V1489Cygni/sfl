options {
    STATIC = false;
    LOOKAHEAD = 2;
}

PARSER_BEGIN(Parser)

package sfl.structure.parser;

import java.util.List;
import java.util.ArrayList;

import sfl.structure.*;
import sfl.structure.code.*;
import sfl.structure.code.expression.*;
import sfl.structure.type.*;

public class Parser {

}

PARSER_END(Parser)

TOKEN : {
      < INTEGER: ("-")?(["0"-"9"])+ >
    | < BOOLEAN : "true" | "false" >
    | < CHAR : "'"~["'"]"'" >
    | < STR : "\""(~["\""])*"\"" >
    | < INT_TYPE : "Integer" >
    | < BOOL_TYPE : "Boolean" >
    | < STR_TYPE : "String" >
    | < CHR_TYPE : "Character" >
    | < MODULE : "module" >
    | < IMPORT : "import" >
    | < DATA : "data" >
    | < NL : ("\r\n" | "\n")+ >
    | < IDENTIFIER : ["a"-"z"](["a"-"z"] | ["A"-"Z"] | "_")* >
    | < IDENTIFIER_UP : ["A"-"Z"](["a"-"z"] | ["A"-"Z"])* >
}

SKIP : {
      " "
    | "\t"
}

void consumeNL() : {
} {
    <NL> | <EOF> | <NL> <EOF>
}

Program Program() : {
    Module module;
    List<Module> imports = new ArrayList();
    Module cur;
    List<Statement> program;
} {
    <MODULE> module = Module() <NL> (<IMPORT> cur = Module() <NL> { imports.add(cur); })*
    program = Statements() <EOF> { return new Program(module, imports, program); }
}

Module Module() : {
    List<String> qualifiers = new ArrayList();
    String cur;
    Token t;
} {
    t = <IDENTIFIER_UP> { cur = t.image; }
    ("." t = <IDENTIFIER_UP> { qualifiers.add(cur); cur = t.image; })*
    { return new Module(new Qualifier(qualifiers), cur); }
}

TypeIdentifier TypeIdentifier() : {
    List<String> qualifiers = new ArrayList();
    String cur;
    Token t;
} {
    t = <IDENTIFIER_UP> { cur = t.image; }
    ("." t = <IDENTIFIER_UP> { qualifiers.add(cur); cur = t.image; })*
    { return new TypeIdentifier(new Module(new Qualifier(qualifiers)), cur); }
}

Identifier Identifier() : {
    List<String> qualifiers = new ArrayList();
    Token t;
} {
    (t = <IDENTIFIER_UP> "." { qualifiers.add(t.image); })* t = <IDENTIFIER> { return new Identifier(new Module(new Qualifier(qualifiers)), t.image); }
}

Constructor Constructor() : {
    List<String> qualifiers = new ArrayList();
    String cur;
    Token t;
} {
    t = <IDENTIFIER_UP> { cur = t.image; }
    ("." t = <IDENTIFIER_UP> { qualifiers.add(cur); cur = t.image; })*
    { return new Constructor(new Module(new Qualifier(qualifiers)), cur); }
}

List<Statement> Statements() : {
    List<Statement> statements = new ArrayList();
    Statement cur;
} {
    (cur = Statement() { statements.add(cur); })* { return statements; }
}

Statement Statement() : {
    Statement st;
    Identifier identifier;
} {
    (st = TypeDeclaration() | (identifier = Identifier() (st = Declaration(identifier) | st = Definition(identifier))))
    { return st; }
}

TypeDeclaration TypeDeclaration() : {
    TypeIdentifier identifier;
    List<Constructor> constructors = new ArrayList();
    Constructor constructor;
    List<List<Type>> argsTypes = new ArrayList();
    List<Type> cur;
    Type type;
} {
    <DATA> identifier = TypeIdentifier() "=" constructor = Constructor() { constructors.add(constructor); cur = new ArrayList(); }
    (type = Type() { cur.add(type); })* { argsTypes.add(cur); }
    ("|" constructor = Constructor() { constructors.add(constructor); cur = new ArrayList(); }
    (type = Type() { cur.add(type); })* { argsTypes.add(cur); })* consumeNL()
    { return new TypeDeclaration(identifier, constructors, argsTypes); }
}

Declaration Declaration(Identifier name) : {
    Type type;
} {
    "::" type = Type() consumeNL() { return new Declaration(name, type); }
}

Type Type() : {
    List<Type> arguments = new ArrayList();
    Type t;
} {
    t = UnaryType() { arguments.add(t); } ("->" t = UnaryType() { arguments.add(t); })* { return new Implication(arguments); }
}

Type UnaryType() : {
    Type t;
} {
    ("(" t = Type() ")" | t = BaseType() | t = TypeIdentifier()) { return t; }
}

Type BaseType() : {
    Token t;
} {
    t = <INT_TYPE> { return BaseType.Integer; } | t = <BOOL_TYPE> { return BaseType.Boolean; }
    | t = <STR_TYPE> { return BaseType.String; } | t = <CHR_TYPE> { return BaseType.Character; }
}

Definition Definition(Identifier name) : {
    List<Expression> args = new ArrayList();
    Expression value, e;
} {
    (e = UnaryExpression() { args.add(e); })* "=" value = Expression() consumeNL() { return new Definition(name, args, value); }
}

Expression Expression() : {
    List<Expression> args = new ArrayList();
    Expression e;
} {
    (e = UnaryExpression() { args.add(e); })+ { return new Application(args); }
}

Expression UnaryExpression() : {
    Expression e;
} {
    ("(" e = Expression() ")" | e = BaseExpression() | e = EC()) { return e; }
}

Expression EC() : {
    List<String> qualifiers = new ArrayList();
    String cur = null;
    Token t;
} {
    (t = <IDENTIFIER_UP> { cur = t.image; } | t = <IDENTIFIER> { return new Identifier(new Module(new Qualifier(qualifiers)), t.image); })
    ("."((t = <IDENTIFIER_UP> { qualifiers.add(cur); cur = t.image; }) | (t = <IDENTIFIER>
    { qualifiers.add(cur); return new Identifier(new Module(new Qualifier(qualifiers)), t.image); })))*
    { return new Constructor(new Module(new Qualifier(qualifiers)), cur); }
}

Expression BaseExpression() : {
    Expression e;
} {
    (e = Int() | e = Bool() | e = Char() | e = Str() | e = Special()) { return e; }
}

Int Int() : {
    Token t;
} {
    t = <INTEGER> { return new Int(Integer.parseInt(t.image)); }
}

Bool Bool() : {
    Token t;
} {
    t = <BOOLEAN> { return new Bool(Boolean.parseBoolean(t.image)); }
}

Char Char() : {
    Token t;
} {
    t = <CHAR> { return new Char(t.image.charAt(1)); }
}

Str Str() : {
    Token t;
} {
    t = <STR> { return new Str(t.image.substring(1, t.image.length() - 1)); }
}

Special Special() : {
} {
    "+" { return Special.Add; } | "-" { return Special.Sub; } | "*" { return Special.Mul; }
    | "/" { return Special.Div; } | "%" { return Special.Mod; } | "==" { return Special.Eq; }
    | ">" { return Special.Gr; } | "<" { return Special.Ls; } | ">=" { return Special.Gre; }
    | "<=" { return Special.Lse; } | "&" { return Special.And; } | "|" { return Special.Or; }
    | "!" { return Special.Not; } | "!!" { return Special.At; }
}