options {
    LOOKAHEAD=2;
}

PARSER_BEGIN(Parser)

package sfl.structure.parser;

import java.util.List;
import java.util.ArrayList;

import sfl.structure.code.*;
import sfl.structure.code.expression.*;
import sfl.structure.type.*;

public class Parser {

}

PARSER_END(Parser)

SKIP : {
      " "
    | "\t"
    | "\n"
    | "\r"
}

TOKEN : {
      < INTEGER: ("" | "-")(["0"-"9"])+ >
    | < BOOLEAN : "true" | "false" >
    | < INT_TYPE : "Integer" >
    | < BOOL_TYPE : "Bool" >
    | < MODULE : "module" >
    | < IMPORT : "import" >
    | < IDENTIFIER : ["a"-"z"](["a"-"z"] | ["A"-"Z"] | "_")* >
    | < IDENTIFIER_UP : ["A"-"Z"](["a"-"z"] | ["A"-"Z"])* >
}

List<Statement> Program() : {
    Statement st;
    List<Statement> res = new ArrayList();
} {
    st = Header() { res.add(st); }
    (st = Statement() { res.add(st); })*
    { return res; }
}

Header Header() : {
    String m, t;
    List<String> im = new ArrayList();
} {
    <MODULE> m = FullName() (<IMPORT> t = FullName() { im.add(t); })* { return new Header(m, im); }
}

String FullName() : {
    String name;
    Token t;
} {
    t = <IDENTIFIER_UP> { name = t.image; }
    ("." t = <IDENTIFIER_UP> { name += "." + t.image; })* { return name; }
}

Statement Statement() : {
    Identifier name;
    Statement st;
} {
    (name = Identifier("") (st = Declaration(name) | st = Definition(name)) { return st; })
    | st = TypeDeclaration() { return st; }
}

Declaration Declaration(Identifier name) : {
    Type type;
} {
    "::" type = Type() { return new Declaration(name, type); }
}

Definition Definition(Identifier name) : {
    Expression e;
    List<Expression> arguments = new ArrayList();
} {
    (e = UnaryExpression() { arguments.add(e); })*
    "=" e = UnaryExpression() { return new Definition(name, arguments, e); }
}

Expression Expression() : {
    Expression e;
    Expression res;
} {
    e = UnaryExpression() { res = e; }
    (e = UnaryExpression() { res = new Application(res, e); })*
    { return res; }
}

Expression UnaryExpression() : {
    Expression e;
    String m = "";
} {
    ("(" e = Expression() ")" | e = Integer() | e = Boolean() |
    ((m = Module())? (e = Identifier(m) | e = TypeConstructor(m)))) { return e; }
}

String Module() : {
    Token t;
    String m = "";
} {
    (t = <IDENTIFIER_UP> "." { m += t.image + "."; })+ { return m; }
}

Data.Int Integer() : {
    Token i;
} {
    i = <INTEGER> { return new Data.Int(Integer.parseInt(i.image)); }
}

Bool Boolean() : {
    Token b;
} {
    b = <BOOLEAN> { return new Bool(Boolean.parseBoolean(b.image)); }
}

Identifier Identifier(String m) : {
    Token id;
} {
    id = <IDENTIFIER> { return new Identifier(m + id.image); }
}

TypeConstructor TypeConstructor(String m) : {
    Token ct;
} {
    ct = <IDENTIFIER_UP> { return new TypeConstructor(m + ct.image); }
}

Type Type() : {
    Type t;
    Type res;
} {
    t = UnaryType() { res = t; }
    ("->" t = UnaryType() { res = new Implication(res, t); })*
    { return res; }
}

Type UnaryType() : {
    Type t;
    String m = "";
} {
    ("(" t = Type() ")" | t = BaseType() | (m = Module())? t = TypeIdentifier(m)) { return t; }
}

Type BaseType() : {
    Token t;
} {
    t = <INT_TYPE> { return BaseType.Integer; } | t = <BOOL_TYPE> { return BaseType.Boolean; }
}

Statement TypeDeclaration() : {
    TypeIdentifier ti;
    TypeConstructor t;
    List<Type> tl;
    List<TypeConstructor> cons = new ArrayList();
    List<List<Type>> args = new ArrayList();
} {
    ti = TypeIdentifier("") "=" t = TypeConstructor("") { cons.add(t); } tl = Args() { args.add(tl); }
    ("|" t = TypeConstructor("") { cons.add(t); } tl = Args() { args.add(tl); })*
    { return new TypeDeclaration(ti, cons, args); }
}

TypeIdentifier TypeIdentifier(String m) : {
    Token id;
} {
    id = <IDENTIFIER_UP> { return new TypeIdentifier(m + id.image); }
}

List<Type> Args() : {
    List<Type> res = new ArrayList();
    Type t;
} {
    (t = Type() { res.add(t); })*
    { return res; }
}