module Test

import Data.List

fib :: Integer -> Integer
fib 0 = 1
fib 1 = 1
fib n = + (fib (- n 1)) (fib (- n 2))

div :: Integer -> Integer -> Integer
div a b = / a b

flip :: (Integer -> Integer -> Integer) -> Integer -> Integer -> Integer
flip f a b = f b a

list :: List
list = map (flip div 10) (put (fib 8) (put 39 (put 50 Empty)))

tmp :: Integer -> Integer
tmp n = + 5 (fib n)

fl :: FList
fl = FCons (fib) (FCons tmp FEmpty)

nList :: List
nList = apply fl list

isPrimeImpl :: Integer -> Integer -> Boolean
isPrimeImpl n 1 = false
isPrimeImpl n m = | (== (% n m) 0) (isPrimeImpl n (- m 1))

isPrime :: Integer -> Boolean
isPrime n = ! (isPrimeImpl n (- n 1))

main :: String
main = + "Result: " (str nList)